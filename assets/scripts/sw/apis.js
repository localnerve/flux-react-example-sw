/***
 * Copyright (c) 2015 Alex Grant (@localnerve), LocalNerve LLC
 * Copyrights licensed under the BSD License. See the accompanying LICENSE file for terms.
 *
 * Handling for api requests.
 *
 * The module 'data' is generated by the build.
 * @see grunt/tasks/service-worker.js
 */
/* global Request */
'use strict';

var toolbox = require('sw-toolbox');
var data = require('./data');
var debug = require('./utils/debug')('apis');
var networkFirst = require('./utils/customNetworkFirst');
var init = require('./init');

/**
 * NOTE:
 *   Network First, Fallback to Cache, Fallback to Content
 *   For every app render, on any entry route, there is always one api GET that
 *   is never made, because it is not required - it was already made on the
 *   server for the initial render - but its data is available in app state
 *   (in the ContentStore). This is why init.resourceContentResponse is used
 *   for cacheMissFallback.
 *
 * Example:
 *   The api get for the home route is not made for the app rendered on '/'.
 *   While offline, if the user starts the app on /contact and goes to '/', that
 *   req-res mapping will not be in the cache.
 */

/**
 * Create the network request for fetch.
 *
 * Api is CSRF protected, so we include the cookie.
 *
 * @param {Object} request - The Request object from sw-toolbox.
 * @returns A Request object that includes the cookie.
 */
function networkRequest (request) {
  return new Request(request.url, { credentials: 'include' });
}

/**
 * Create a request for cache.
 *
 * This exists because:
 * ignoreSearch option is not implemented yet in cache.match/matchAll,
 * so we stripSearchParameters to ignoreSearch ourselves in the request we cache.
 * https://code.google.com/p/chromium/issues/detail?id=426309
 *
 * Response from Google:
 * https://github.com/GoogleChrome/sw-toolbox/issues/35
 *
 * @param {Object} request - A Request object from sw-toolbox.
 * @returns A string of the modified request url to be used in caching.
 */
function cacheRequest (request) {
  return networkFirst.stripSearchParameters(request.url);
}

/**
 * Install route handlers for all api paths.
 */
function installApiRequestProxies () {
  data.api_paths.forEach(function (path) {
    debug(toolbox.options, 'install api handler', path);

    // Handle get requests
    toolbox.router.get(path+'*', networkFirst.routeHandlerFactory(
      networkRequest, cacheRequest, init.resourceContentResponse
    ), {
      debug: toolbox.options.debug
    });

    // TODO: handle the post request.
    // This could store in indexedDB and use background sync to resolve.
  });
}

module.exports = {
  setupApiRequests: installApiRequestProxies
};
