/***
 * Copyright (c) 2015, 2016 Alex Grant (@localnerve), LocalNerve LLC
 * Copyrights licensed under the BSD License. See the accompanying LICENSE file for terms.
 *
 * Entry point for the service worker.
 *
 * The 'precache' and 'data' modules are generated by the build.
 * @see grunt/tasks/service-worker.js
 */
'use strict';

var toolbox = require('sw-toolbox');
var data = require('./data');

toolbox.options.debug = data.debug;

// Construct cache name and save scope.
// Relies on sw-toolbox default name format for scope.
// CacheId must always start name.
var m = toolbox.options.cache.name.match(/([^\$]+)\${3}$/);
toolbox.options.scope = m && m[1];
toolbox.options.cache.name = data.cacheId + '-' + toolbox.options.cache.name;

// Setup debugging
var debugLib = require('./utils/debug');
if (data.debug) {
  debugLib.enable('*');
}
var debug = debugLib('index');

var init = require('./init');
var assets = require('./assets');

// Setup our activate handling
require('./activate');

// Setup push notification handling
require('./push');

// Setup message handling
require('./messages');

// Setup the sw-precache event handling and managed cache
require('./precache');

// Setup non-project static asset precaching (cdn requests)
assets.setupAssetRequests();

// If all init.data exists (and service-worker is starting), run the init command.
// The init message may never come if service-worker was restarted by the system.
var initPromise = init.data()
.then(function (payload) {
  payload.startup = true;
  return init.command(payload, function (res) {
    if (res.error) {
      console.error('startup init command failed', res.error);
    }
  });
})
.catch(function (error) {
  debug('startup not running init command', error);
})
.then(function () {
  // Successful or not, we're done and don't want to impede other fetch
  // handlers.
  toolbox.router.default = null;
});

// #43, Setup a temporary default handler for async startup needs.
toolbox.router.default =
/**
 * The toolbox routes are not setup until the init command installs
 * the dynamic routes. Setup a default handler until init completes.
 *
 * @param {Request} request - The fetch event request object.
 * @returns {Promise} Resolves to a Response or a Network Error.
 */
function defaultHandler (request) {
  return initPromise.then(function () {
    debug('defaultHandler request ', request.url);

    // Since init complete, get the handler.
    var handler = toolbox.router.match(request);
    if (handler) {
      debug('defaultHandler successfully handled ', request.url);
      return handler(request);
    }

    debug('defaultHandler could not handle ', request);
    throw new Error('defaultHandler could not handle ' + request.url);
  });
};
