/***
 * Copyright (c) 2015, 2016 Alex Grant (@localnerve), LocalNerve LLC
 * Copyrights licensed under the BSD License. See the accompanying LICENSE file for terms.
 */
'use strict';

var path = require('path');
var assetsJsonFile = './assets.json';

/**
 * Creates a configuration for loading and decorating assets json at a later time.
 * Assets json comes from webpack stats, generated by the build.
 *
 * @param {String} baseDir - The base directory on which to join asset paths.
 * @returns {Object} The Config object used to load assets json and reference assets.
 */
function assetsConfig (baseDir) {
  /**
   * Creates Config Object
   *
   * @class
   * @param {String} dir - The base directory on which to join asset paths.
   */
  function Config (dir) {
    this.baseDir = dir;
  }

  Config.prototype = {
    /**
     * Loads assets.json file
     *
     * @returns {Object} A reference to the object instance for chainability.
     */
    load: function () {
      if (!this.assets) {
        this.assets = require(assetsJsonFile).assets;
      }
      return this;
    },

    /**
     * Loads assets json if not done, gets the main script asset name,
     * and joins it to the base directory.
     *
     * @returns {String} The main script asset file path.
     */
    mainScript: function () {
      this.load();
      var main = Array.isArray(this.assets.main) ? this.assets.main[0] : this.assets.main;
      return path.join(this.baseDir, main);
    },

    /**
     * Loads assets json if not done, gets the sw-reg script asset name,
     * and joins it to the base directory.
     *
     * @returns {String} The sw-reg script asset file path.
     */
    swRegScript: function () {
      this.load();
      var swReg = Array.isArray(this.assets.swReg) ? this.assets.swReg[0] : this.assets.swReg;
      return path.join(this.baseDir, swReg);
    },

    /**
     * Loads assets json if not done, gets the service-worker script asset name,
     * and joins it to the base directory.
     *
     * @param {Boolean} nameOnly - If true, only return the asset name, not whole asset path.
     * @returns {String} The service-worker script asset file path.
     */
    swMainScript: function (nameOnly) {
      this.load();
      var sw = Array.isArray(this.assets.sw) ? this.assets.sw[0] : this.assets.sw;
      return nameOnly ? sw : path.join(this.baseDir, sw);
    },

    /**
     * Same as swMainScript, but for the source map asset.
     *
     * @param {Boolean} nameOnly - If true, only return the asset name, not whole asset path.
     * @returns {String} The service-worker source map if found.
     */
    swMainScriptMap: function (nameOnly) {
      this.load();
      var swMap = Array.isArray(this.assets.sw) ? this.assets.sw[1] : undefined;

      var swSourceMap;
      if (swMap) {
        swSourceMap = nameOnly ? swMap : path.join(this.baseDir, swMap);
      }
      return swSourceMap;
    }
  };

  return new Config(baseDir);
}

module.exports = {
  assetsJsonFile: assetsJsonFile,
  assetsConfig: assetsConfig
};
